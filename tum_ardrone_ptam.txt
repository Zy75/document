
1. はじめに

ドローンを屋内で使うには課題がある。屋外ならGPSを使って自分の位置がわかる。だか屋内で使うにはGPSの誤差は大きすぎる。
そこで今回は、ドローンに載せたカメラを使って自分の位置を知る方法を使った。SLAM(simultaneous localization and mapping)といって、
自己位置推定と同時に地図を作ることができる。

2. tum_ardrone

tum_ardroneは、ROS(robot operating system)用のSLAMパッケージで、PTAMという技術を使う。
PTAM(parallel tracking and mapping)は、自己の位置を追跡しながら地図を作る。TUMはミュンヘン工科大学の略。

3. 技術

カメラで撮った画像から特徴点(key point)を抜き出す。　初めに撮った画像と、時間がたってドローンが動いた後の画像、の両方から特徴点を抜き出す。
ドローンが動いたあとの画像の特徴点は、初めの画像の特徴点から動きがある。　
この２つの画像の特徴点の対応から、初めのカメラの位置と姿勢、動いた後のカメラの位置と姿勢、空間にある特徴点の位置の３つを三次元で構成できる。　
そうすると、ドローンの位置がわかるし、地図も作れる。ただこれだけでは、スケールがわからないという問題があるが、tum_ardroneでは工夫している。

4. メモ

実際に動かしてみたメモ

drone: ARDrone 2.0
linux: ubuntu 14.04
ROS version: indigo
目標：autopilotでホバーリング（定点静止）をさせたかった。
結果：成功。　位置がずれていかないし、動かしても戻ってくるところが、ARDrone2.0の built-inホバーリング機能とちがう。

A. ROS INDIGO用のtum_ardroneは、catkin_makeでビルドしなければならない。どこかに書いてあったrosmakeでビルドして一度行き詰まった。

B. 静止位置を変えるには、ビデオ画面（地図画面ではない）をマウスでクリックする。水平位置、高度、yaw軸を変えられる。

C. autoinit 500 800 のあと、1m up, 1m downのあとホバーリングすればいい。

D. autoinitは本来４つの引数を持つ。少ない引数だと、他はデフォルト値が使われると、今のところ考えている。
　 ドキュメントには、PTAMの初期化（の一部）は、taking first key frame, flying up, taking second key frameとある。
tum_ardroneのソースコードを見ると、このflying upは高度を上げるということのようだ。

E. 平行移動のないyaw軸回転はよくないらしい。PTAMのトラッキングに問題がでるのか？

F. カメラに写るのが壁だけのように単一深度だと良くない。垂直移動と、ピッチ回転の区別がつきにくいから。

G. PTAM初期化のあと、1m up 1m downが良いのは、超音波センサでスケールがわかるかららしい。

H. tum_ardroneは、カメラ画像以外にもドローンのセンサを利用して、カルマンフィルタで情報源を統合している。

I. はじめデスクトップPCにインストールしたが、ubuntuごと高確率でフリーズした。別の環境ならとノートPCにインストールしたら成功した。
　ノートPCでは、一度見ただけだが、topコマンドで見ると、８つあるコア全部が50%ぐらいのCPU使用率になっていた。デスクトップPCは性能が足りなかったのか？
　性能が足りないとして、OS全体がフリーズするものなのか？　　もうひとつ思い当たるのが、USBインストールメディアを引き抜くのが早すぎてデータが壊れた可能性。 
